{{- include "sch.config.init" (list . "ibm-sccm.sch.chart.config.values") }}
{{ $appName := include "sch.names.appName" (list .) }}
{{ $fullName := include "sch.names.fullName" (list .) }}
{{ $saName := include "sch.names.fullCompName" (list . "serviceaccount") }}

apiVersion: v1
kind: Pod
metadata:
  name: {{ $fullName }}-test
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": hook-succeeded
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 4 }}
  labels:
    app.kubernetes.io/name: {{  $appName  }}-test
    app.kubernetes.io/instance: {{  .Release.Name  }}
    app.kubernetes.io/managed-by: {{  .Release.Service  }}
    helm.sh/chart: {{  include "ibm-sccm.chart" .  }}
    release: {{  .Release.Name  }}
spec:
  restartPolicy: Never
  {{- if .Values.serviceAccount.create }}
  serviceAccountName: {{ $saName }}
  {{- else }}
  serviceAccountName: {{ .Values.serviceAccount.name | default "default" }}
  {{- end }}
  hostNetwork: false
  hostPID: false
  hostIPC: false
  securityContext:
  {{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | indent 4 }}
  affinity:
  {{- include "ibm-sccm.nodeAffinity" (list . .Values.affinity.nodeAffinity) | indent 8 }}
  containers:
    - name: {{  .Chart.Name  }}
      {{- if .Values.image.digest.enabled }}
      image: "{{  .Values.image.repository  }}@{{ .Values.image.digest.value }}"
      {{- else }}
      image: "{{  .Values.image.repository  }}:{{ .Values.image.tag  }}"
      {{- end }}
      imagePullPolicy: {{ .Values.image.pullPolicy }}
      securityContext:
      {{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | indent 8 }}
      command: ["/bin/sh", "-c", "ret=`cat /app/CC/log/CCStartup.log | grep 'Web Server has been started!'` ; if [[ -n $ret ]]; then echo 'IBM SCC installation is successful and IBM Control Center Monitor application is running!' ; else echo 'IBM SCC application is not running!' ; fi"]
      resources:
        limits:
          cpu: {{ .Values.resources.limits.cpu }}
          memory: {{ .Values.resources.limits.memory }}
        requests:
          cpu: {{ .Values.resources.requests.cpu }}
          memory: {{ .Values.resources.requests.memory }}
      env:
        - name: LICENSE
          value: {{ .Values.license | quote }}
        - name: ENGINE_NAME
          value: {{  .Release.Name  }}-{{  $appName  }}-0 
      volumeMounts:
        - mountPath: /app/CC/log/
          name: cc-volume
          subPathExpr: $(ENGINE_NAME)/logs
  imagePullSecrets:
    - name: ibm-entitlement-key
  volumes:
      - name: cc-volume
        persistentVolumeClaim:
          {{- if .Values.persistentVolumeCCM.claimName}}
          claimName: {{ .Values.persistentVolumeCCM.claimName}}
          {{- else }}
          claimName: {{  $fullName  }}-pvc-ccm
          {{- end }}

